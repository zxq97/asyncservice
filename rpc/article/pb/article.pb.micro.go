// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/article/article.proto

package article_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ArticleServer service

type ArticleServerService interface {
	GetArticle(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error)
	GetBatchArticle(ctx context.Context, in *ArticleBatchRequest, opts ...client.CallOption) (*ArticleBatchResponse, error)
	GetTopic(ctx context.Context, in *TopicRequest, opts ...client.CallOption) (*TopicResponse, error)
	GetBatchTopic(ctx context.Context, in *TopicBatchRequest, opts ...client.CallOption) (*TopicBatchResponse, error)
	ChangeVisibleType(ctx context.Context, in *VisibleTypeRequest, opts ...client.CallOption) (*EmptyResponse, error)
	PublishArticle(ctx context.Context, in *PublishArticleRequest, opts ...client.CallOption) (*EmptyResponse, error)
	DeleteArticle(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*EmptyResponse, error)
	PushFollowFeed(ctx context.Context, opts ...client.CallOption) (ArticleServer_PushFollowFeedService, error)
	FollowAddOutBox(ctx context.Context, in *FollowRequest, opts ...client.CallOption) (*EmptyResponse, error)
	UnfollowDeleteOutBox(ctx context.Context, in *FollowRequest, opts ...client.CallOption) (*EmptyResponse, error)
}

type articleServerService struct {
	c    client.Client
	name string
}

func NewArticleServerService(name string, c client.Client) ArticleServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "article"
	}
	return &articleServerService{
		c:    c,
		name: name,
	}
}

func (c *articleServerService) GetArticle(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.GetArticle", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) GetBatchArticle(ctx context.Context, in *ArticleBatchRequest, opts ...client.CallOption) (*ArticleBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.GetBatchArticle", in)
	out := new(ArticleBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) GetTopic(ctx context.Context, in *TopicRequest, opts ...client.CallOption) (*TopicResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.GetTopic", in)
	out := new(TopicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) GetBatchTopic(ctx context.Context, in *TopicBatchRequest, opts ...client.CallOption) (*TopicBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.GetBatchTopic", in)
	out := new(TopicBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) ChangeVisibleType(ctx context.Context, in *VisibleTypeRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.ChangeVisibleType", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) PublishArticle(ctx context.Context, in *PublishArticleRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.PublishArticle", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) DeleteArticle(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.DeleteArticle", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) PushFollowFeed(ctx context.Context, opts ...client.CallOption) (ArticleServer_PushFollowFeedService, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.PushFollowFeed", &PushFollowFeedRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &articleServerServicePushFollowFeed{stream}, nil
}

type ArticleServer_PushFollowFeedService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PushFollowFeedRequest) error
}

type articleServerServicePushFollowFeed struct {
	stream client.Stream
}

func (x *articleServerServicePushFollowFeed) Close() error {
	return x.stream.Close()
}

func (x *articleServerServicePushFollowFeed) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *articleServerServicePushFollowFeed) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *articleServerServicePushFollowFeed) Send(m *PushFollowFeedRequest) error {
	return x.stream.Send(m)
}

func (c *articleServerService) FollowAddOutBox(ctx context.Context, in *FollowRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.FollowAddOutBox", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServerService) UnfollowDeleteOutBox(ctx context.Context, in *FollowRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleServer.UnfollowDeleteOutBox", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticleServer service

type ArticleServerHandler interface {
	GetArticle(context.Context, *ArticleRequest, *ArticleResponse) error
	GetBatchArticle(context.Context, *ArticleBatchRequest, *ArticleBatchResponse) error
	GetTopic(context.Context, *TopicRequest, *TopicResponse) error
	GetBatchTopic(context.Context, *TopicBatchRequest, *TopicBatchResponse) error
	ChangeVisibleType(context.Context, *VisibleTypeRequest, *EmptyResponse) error
	PublishArticle(context.Context, *PublishArticleRequest, *EmptyResponse) error
	DeleteArticle(context.Context, *ArticleRequest, *EmptyResponse) error
	PushFollowFeed(context.Context, ArticleServer_PushFollowFeedStream) error
	FollowAddOutBox(context.Context, *FollowRequest, *EmptyResponse) error
	UnfollowDeleteOutBox(context.Context, *FollowRequest, *EmptyResponse) error
}

func RegisterArticleServerHandler(s server.Server, hdlr ArticleServerHandler, opts ...server.HandlerOption) error {
	type articleServer interface {
		GetArticle(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error
		GetBatchArticle(ctx context.Context, in *ArticleBatchRequest, out *ArticleBatchResponse) error
		GetTopic(ctx context.Context, in *TopicRequest, out *TopicResponse) error
		GetBatchTopic(ctx context.Context, in *TopicBatchRequest, out *TopicBatchResponse) error
		ChangeVisibleType(ctx context.Context, in *VisibleTypeRequest, out *EmptyResponse) error
		PublishArticle(ctx context.Context, in *PublishArticleRequest, out *EmptyResponse) error
		DeleteArticle(ctx context.Context, in *ArticleRequest, out *EmptyResponse) error
		PushFollowFeed(ctx context.Context, stream server.Stream) error
		FollowAddOutBox(ctx context.Context, in *FollowRequest, out *EmptyResponse) error
		UnfollowDeleteOutBox(ctx context.Context, in *FollowRequest, out *EmptyResponse) error
	}
	type ArticleServer struct {
		articleServer
	}
	h := &articleServerHandler{hdlr}
	return s.Handle(s.NewHandler(&ArticleServer{h}, opts...))
}

type articleServerHandler struct {
	ArticleServerHandler
}

func (h *articleServerHandler) GetArticle(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error {
	return h.ArticleServerHandler.GetArticle(ctx, in, out)
}

func (h *articleServerHandler) GetBatchArticle(ctx context.Context, in *ArticleBatchRequest, out *ArticleBatchResponse) error {
	return h.ArticleServerHandler.GetBatchArticle(ctx, in, out)
}

func (h *articleServerHandler) GetTopic(ctx context.Context, in *TopicRequest, out *TopicResponse) error {
	return h.ArticleServerHandler.GetTopic(ctx, in, out)
}

func (h *articleServerHandler) GetBatchTopic(ctx context.Context, in *TopicBatchRequest, out *TopicBatchResponse) error {
	return h.ArticleServerHandler.GetBatchTopic(ctx, in, out)
}

func (h *articleServerHandler) ChangeVisibleType(ctx context.Context, in *VisibleTypeRequest, out *EmptyResponse) error {
	return h.ArticleServerHandler.ChangeVisibleType(ctx, in, out)
}

func (h *articleServerHandler) PublishArticle(ctx context.Context, in *PublishArticleRequest, out *EmptyResponse) error {
	return h.ArticleServerHandler.PublishArticle(ctx, in, out)
}

func (h *articleServerHandler) DeleteArticle(ctx context.Context, in *ArticleRequest, out *EmptyResponse) error {
	return h.ArticleServerHandler.DeleteArticle(ctx, in, out)
}

func (h *articleServerHandler) PushFollowFeed(ctx context.Context, stream server.Stream) error {
	return h.ArticleServerHandler.PushFollowFeed(ctx, &articleServerPushFollowFeedStream{stream})
}

type ArticleServer_PushFollowFeedStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*PushFollowFeedRequest, error)
}

type articleServerPushFollowFeedStream struct {
	stream server.Stream
}

func (x *articleServerPushFollowFeedStream) Close() error {
	return x.stream.Close()
}

func (x *articleServerPushFollowFeedStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *articleServerPushFollowFeedStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *articleServerPushFollowFeedStream) Recv() (*PushFollowFeedRequest, error) {
	m := new(PushFollowFeedRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *articleServerHandler) FollowAddOutBox(ctx context.Context, in *FollowRequest, out *EmptyResponse) error {
	return h.ArticleServerHandler.FollowAddOutBox(ctx, in, out)
}

func (h *articleServerHandler) UnfollowDeleteOutBox(ctx context.Context, in *FollowRequest, out *EmptyResponse) error {
	return h.ArticleServerHandler.UnfollowDeleteOutBox(ctx, in, out)
}
