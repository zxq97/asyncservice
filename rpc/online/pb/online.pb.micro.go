// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/online/online.proto

package online_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OnlineServer service

type OnlineServerService interface {
	StartUp(ctx context.Context, in *OnlineRequest, opts ...client.CallOption) (*EmptyResponse, error)
	Shutdown(ctx context.Context, in *OnlineRequest, opts ...client.CallOption) (*EmptyResponse, error)
	GetOnlineAll(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*OnlineResponse, error)
}

type onlineServerService struct {
	c    client.Client
	name string
}

func NewOnlineServerService(name string, c client.Client) OnlineServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "online"
	}
	return &onlineServerService{
		c:    c,
		name: name,
	}
}

func (c *onlineServerService) StartUp(ctx context.Context, in *OnlineRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "OnlineServer.StartUp", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServerService) Shutdown(ctx context.Context, in *OnlineRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "OnlineServer.Shutdown", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineServerService) GetOnlineAll(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*OnlineResponse, error) {
	req := c.c.NewRequest(c.name, "OnlineServer.GetOnlineAll", in)
	out := new(OnlineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OnlineServer service

type OnlineServerHandler interface {
	StartUp(context.Context, *OnlineRequest, *EmptyResponse) error
	Shutdown(context.Context, *OnlineRequest, *EmptyResponse) error
	GetOnlineAll(context.Context, *EmptyRequest, *OnlineResponse) error
}

func RegisterOnlineServerHandler(s server.Server, hdlr OnlineServerHandler, opts ...server.HandlerOption) error {
	type onlineServer interface {
		StartUp(ctx context.Context, in *OnlineRequest, out *EmptyResponse) error
		Shutdown(ctx context.Context, in *OnlineRequest, out *EmptyResponse) error
		GetOnlineAll(ctx context.Context, in *EmptyRequest, out *OnlineResponse) error
	}
	type OnlineServer struct {
		onlineServer
	}
	h := &onlineServerHandler{hdlr}
	return s.Handle(s.NewHandler(&OnlineServer{h}, opts...))
}

type onlineServerHandler struct {
	OnlineServerHandler
}

func (h *onlineServerHandler) StartUp(ctx context.Context, in *OnlineRequest, out *EmptyResponse) error {
	return h.OnlineServerHandler.StartUp(ctx, in, out)
}

func (h *onlineServerHandler) Shutdown(ctx context.Context, in *OnlineRequest, out *EmptyResponse) error {
	return h.OnlineServerHandler.Shutdown(ctx, in, out)
}

func (h *onlineServerHandler) GetOnlineAll(ctx context.Context, in *EmptyRequest, out *OnlineResponse) error {
	return h.OnlineServerHandler.GetOnlineAll(ctx, in, out)
}
